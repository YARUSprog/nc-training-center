usr.select-all=SELECT ID, EMAIL, PASSWORD, FIRST_NAME, LAST_NAME, MANAGER_ID, IMAGE_URL, IS_ACTIVE FROM USR
usr.select-by-id=SELECT ID, EMAIL, PASSWORD, FIRST_NAME, LAST_NAME, MANAGER_ID, IMAGE_URL, IS_ACTIVE FROM USR WHERE ID = ?
usr.select-by-email=SELECT ID, EMAIL, PASSWORD, FIRST_NAME, LAST_NAME, MANAGER_ID, IMAGE_URL, IS_ACTIVE FROM USR WHERE EMAIL = ?
usr.delete=delete FROM USR WHERE ID = ?
usr.insert=insert INTO USR(EMAIL, PASSWORD, FIRST_NAME, LAST_NAME, MANAGER_ID, IS_ACTIVE) VALUES ( ?, ?, ?, ?, ?, ?) RETURNING ID
usr.update=update USR SET EMAIL = ?, PASSWORD = ?, FIRST_NAME = ?, LAST_NAME = ?, MANAGER_ID = ?, IS_ACTIVE = ? WHERE ID = ?
usr.select-all-trainers=select usr.id, usr.email, usr.IMAGE_URL,usr.password, usr.first_name, usr.last_Name, usr.token, usr.created, usr.image_url, \
  usr.manager_id, usr.is_active, usr.is_on_landing_page, usr.description from usr \
  join assigned_role ar on usr.id = ar.user_id \
  join role_r rr on ar.role_id = rr.id \
  where rr.name = 'TRAINER'
usr.select-all-managers=select usr.id, usr.email, usr.IMAGE_URL,usr.password, usr.first_name, usr.last_Name, usr.token, usr.created, usr.image_url, \
  usr.manager_id, usr.is_active, usr.is_on_landing_page, usr.description from usr \
  join assigned_role ar on usr.id = ar.user_id \
  join role_r rr on ar.role_id = rr.id \
  where rr.name = 'MANAGER'
usr.select-all-trainers-by-id=select t.id, t.email, t.IMAGE_URL, t.password, t.first_name, \
  t.last_name, t.token, t.created,\
  t.manager_id, t.image_url, t.is_active, t.is_on_landing_page, t.description \
  from usr t \
  join course c on c.user_id = t.id \
  join grup g on g.course_id = c.id \
  join usr_group ug on ug.group_id = g.id \
  join usr u on u.id = ug.user_id \
  join assigned_role ar on ar.user_id = t.id \
  join role_r r on r.id = ar.role_id \
  where r.name = 'TRAINER' and u.id = ?
usr.update-usr-by-admin=update usr set first_name = ?, last_name = ?, manager_id = ? where id = ?
usr.update-change-active=update usr set is_active = ? where id = ?
usr.select-manager-by-id=select m.id, m.email, m.IMAGE_URL, m.password, m.first_name, \
  m.last_name, m.token, m.created, \
  m.manager_id, m.image_url, m.is_active, m.is_on_landing_page, m.description \
  from usr m \
  join usr emp on emp.manager_id = m.id \
  where emp.id = ?
usr.select-ungrouped-by-course-id=select id, email, IMAGE_URL, password, first_name, last_Name, token, created, manager_id, \
  is_active, is_on_landing_page, description from usr where id in \
  (select distinct usr.id from usr join desirable_schedule ug on usr.id = ug.user_id where course_id = ?) \
  and id not in (select usr.id from usr join usr_group ug on usr.id = ug.user_id where group_id in \
  (select grup.id from grup where course_id = ?) )
usr.select-by-group-id=SELECT usr.id, usr.email, usr.IMAGE_URL, usr.password, usr.first_name, usr.last_Name, usr.token, usr.created, usr.image_url,\
usr.manager_id, usr.is_active, usr.is_on_landing_page, usr.description \
from usr JOIN usr_group ug ON usr.id = ug.user_id WHERE group_id = ?
usr.select-on-landing-page=SELECT ID, EMAIL, IMAGE_URL, PASSWORD, FIRST_NAME, LAST_NAME, MANAGER_ID, IS_ACTIVE, IS_ON_LANDING_PAGE, DESCRIPTION FROM USR WHERE IS_ON_LANDING_PAGE = true
#usr.select-on-landing-page=SELECT ID, EMAIL, PASSWORD, FIRST_NAME, LAST_NAME, MANAGER_ID, IS_ACTIVE, IS_ON_LANDING_PAGE, DESCRIPTION FROM USR WHERE IS_ON_LANDING_PAGE = true
usr.update-landing-page=update usr set is_on_landing_page = ? where id = ?
usr.select-all-by-course=select distinct usr.* from usr join desirable_schedule ug on usr.id = ug.user_id  where course_id = ?

course.select-all=SELECT ID, NAME, LEVEL, course_status_id, USER_ID, IMAGE_URL, start_date, end_date, is_on_landing_page, description FROM course
course.select-by-id=SELECT ID, NAME, LEVEL, course_status_id, USER_ID, IMAGE_URL, start_date, end_date, is_on_landing_page, description FROM course where id = ?
course.delete=delete from course where id = ?
course.insert=insert into course (name, level, course_status_id, user_id, IMAGE_URL, start_date, end_date, is_on_landing_page, description) values(?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING ID
course.update=update course set NAME = ?, LEVEL = ?, course_status_id = ?, USER_ID = ?, IMAGE_URL = ?, start_date = ?, end_date = ?, is_on_landing_page = ?, description = ?   where id = ?
course.select-on-landing-page=SELECT ID, NAME, LEVEL, course_status_id, USER_ID, IMAGE_URL, start_date, end_date, is_on_landing_page, description FROM course WHERE is_on_landing_page = true
course.update-landing-page=update course set is_on_landing_page = ? where id = ?
role.select-by-user-id=SELECT role_r.name as role FROM role_r JOIN assigned_role ar on role_r.id = ar.role_id WHERE AR.user_id = ?
course.select-by-level=select id, name, level, course_status_id, user_id, image_url, start_date, end_date, is_on_landing_page, description from course where level = ?
course.select-by-trainer=select id, name, level, course_status_id, user_id, image_url, start_date, end_date, is_on_landing_page, description from course where user_id = ?
course.select-trainer=select usr.id, usr.email, usr.IMAGE_URL,usr.password, usr.first_name, usr.last_Name, usr.token, usr.created, usr.image_url, \
  usr.manager_id, usr.is_active, usr.is_on_landing_page, usr.description from usr \
  join assigned_role ar on usr.id = ar.user_id \
  join role_r rr on ar.role_id = rr.id \
  join course c on c.user_id = usr.id \
  where rr.name = 'TRAINER' and c.id = ?
course.select-course-by-group=SELECT course.* from course JOIN grup g ON course.id = g.id WHERE g.id = ?
group.select-all=SELECT ID, COURSE_ID, TITLE FROM GRUP
group.select-by-id=SELECT ID, COURSE_ID, TITLE FROM GRUP WHERE ID = ?
group.delete=DELETE FROM GRUP WHERE ID = ?
group.update=UPDATE GRUP SET COURSE_ID= ? , TITLE= ? WHERE ID = ?
group.insert=INSERT INTO GRUP (COURSE_ID, TITLE) VALUES (?, ?) RETURNING ID
group.select-number-of-employees=select count(*) from usr_group where group_id = ?
group.select-by-course=SELECT ID, COURSE_ID, TITLE FROM GRUP WHERE COURSE_ID = ?
group.select-by-employee=select distinct g.id, g.course_id, g.title \
  from grup g \
  join usr_group ug on ug.group_id = g.id \
  join usr u on u.id = ug.user_id \
  where u.id = ?
group.select-by-trainer-id=SELECT grup.id, grup.course_id, grup.title from grup JOIN course c ON grup.course_id = c.id JOIN usr u ON c.user_id = u.id WHERE user_id = ?

usr_group.delete-all-for-user=delete from usr_group where user_id = ?
usr_group.delete-all-for-group=delete from usr_group where group_id = ?
usr_group.select-by-usr-and-course=select usr_group.id,  usr_group.user_id, usr_group.group_id, usr_group.is_attending  from grup join usr_group on grup.id = usr_group.group_id where course_id = ? and user_id = ?
usr_group.select-by-group=select usr_group.id,  usr_group.user_id, usr_group.group_id, usr_group.is_attending from usr_group where group_id = ?
usr_group.select-by-usr-and-group=select usr_group.id,  usr_group.user_id, usr_group.group_id, usr_group.is_attending  from usr_group where group_id = ? and user_id = ?
usr_group.insert=insert into usr_group(user_id, group_id, is_attending) values (?, ?, ?) returning id
usr_group.update=update usr_group set group_id = ?, is_attending = ? where id = ?
#



level.select-all=select id, title from level
level.select-by-id=select id, title from level where id = ?
level.delete=delete from level where id = ?
level.insert=insert into level(title) values (?) returning ID
level.update=update level set title=? where id = ?
level.select-by-trainer=select distinct level.id, level.title from level join course c on level.id = c.level where user_id = ?
level.select-by-name=select id, title from level where title = ?

lesson.select-all=SELECT id, group_id, topic, trainer_id, time_date, is_canceled FROM lesson
lesson.select-by-id=SELECT id, group_id, topic, trainer_id, time_date, is_canceled FROM lesson WHERE id = ?
lesson.insert=INSERT INTO lesson(group_id, topic, trainer_id, time_date, is_canceled) VALUES ( ?, ?, ?, ?, ?) RETURNING ID
lesson.update=UPDATE lesson SET group_id = ?, topic = ?, trainer_id = ?, time_date = ?, is_canceled = ?  WHERE id = ?
lesson.delete=DELETE FROM lesson WHERE id = ?
lesson.archive=UPDATE lesson SET is_archived = true  WHERE id = ?
lesson.select-by-group-id=SELECT id, group_id, topic, trainer_id, time_date, is_canceled FROM lesson where group_id = ? and is_archived = false order by time_date
lesson.select-by-group-id-and-user-id=SELECT lesson_id as id, group_id, topic, trainer_id, time_date, ar.title as absence_reason, astat.title  as absence_status FROM lesson \
JOIN grup g ON lesson.group_id = g.id \
JOIN attendance a ON lesson.id = a.lesson_id \
LEFT JOIN absence_reason ar ON ar.id = a.reason_id \
JOIN attendance_status astat ON a.status_id = astat.id \
WHERE group_id = ? AND user_id = ?

attendance.select-by-student-id-and-course-id=select attendance.id, u.id as student_id, u.first_name, u.last_name, course_id, l.id as lesson_id, l.time_date, l.topic, atts.title as status, ar.title as reason from attendance \
join lesson l on attendance.lesson_id = l.id \
join grup g on l.group_id = g.id \
join course c on g.course_id = c.id \
join usr u on attendance.user_id = u.id \
join attendance_status atts on attendance.status_id = atts.id \
left join absence_reason ar on attendance.reason_id = ar.id \
where attendance.user_id = ? and course_id = ?

attendance.select-by-student-id-and-group-id=select attendance.id, u.id as student_id, u.first_name, u.last_name, course_id, l.id as lesson_id, l.time_date, l.topic, atts.title as status, ar.title as reason from attendance \
join lesson l on attendance.lesson_id = l.id \
join grup g on l.group_id = g.id \
join course c on g.course_id = c.id \
join usr u on attendance.user_id = u.id \
join attendance_status atts on attendance.status_id = atts.id \
left join absence_reason ar on attendance.reason_id = ar.id \
where attendance.user_id = ? and g.id = ?


absence_reason.select-all=SELECT ID, TITLE FROM ABSENCE_REASON
absence_reason.select-by-id=SELECT ID, TITLE FROM ABSENCE_REASON WHERE ID = ?
absence_reason.delete=delete from ABSENCE_REASON WHERE ID = ?
absence_reason.insert=insert into ABSENCE_REASON(TITLE) VALUES (?) RETURNING ID
absence_reason.update=update ABSENCE_REASON SET TITLE = ? WHERE ID = ?

status.select-name-by-id=SELECT NAME, DESCRIPTION FROM COURSE_STATUS WHERE ID= ?
status.select-id-by-name=SELECT ID, DESCRIPTION FROM COURSE_STATUS WHERE NAME= ?

desirable.schedule.select-all=select id, user_id, course_id, cron_interval, suitability from desirable_schedule
desirable.schedule.select-by-course-id=select id, user_id, course_id, cron_interval, suitability from desirable_schedule where course_id = ?
desirable.schedule.insert=insert into desirable_schedule (user_id,course_id, cron_interval, suitability ) values (?, ?, ?, ?) returning id
suitability.select-all=select id, title, priority, color from suitability

attachment.select-all = SELECT ID, URL, DESCRIPTION FROM ATTACHMENT
attachment.select-by-id = SELECT ID, URL, DESCRIPTION FROM ATTACHMENT WHERE ID = ?
attachment.delete = DELETE FROM ATTACHMENT WHERE ID = ?
attachment.insert = INSERT INTO ATTACHMENT(URL, DESCRIPTION) VALUES(?, ?) RETURNING ID
attachment.select-by-lesson-id = SELECT ID, URL, DESCRIPTION FROM ATTACHMENT JOIN LESSON_ATTACHMENT L ON ATTACHMENT.ID = L.ATTACHMENT_ID WHERE L.LESSON_ID = ?
attachment.select-by-url = SELECT ID, URL, DESCRIPTION FROM ATTACHMENT WHERE URL = ?

lesson_attachment.delete-by-attachment-id = DELETE FROM LESSON_ATTACHMENT WHERE ATTACHMENT_ID = ?
lesson_attachment.insert = INSERT INTO LESSON_ATTACHMENT(ATTACHMENT_ID, LESSON_ID) VALUES(?, ?)
lesson_attachment.update = UPDATE LESSON_ATTACHMENT SET ATTACHMENT_ID = ?, LESSON_ID = ? WHERE ID = ?
lesson_attachment.select-all-by-lesson-id =SELECT ID, ATTACHMENT_ID, LESSON_ID FROM LESSON_ATTACHMENT WHERE LESSON_ID = ?
lesson_attachment.delete = DELETE FROM LESSON_ATTACHMENT WHERE ID = ?
lesson_attachment.delete-all-by-lesson-id = DELETE FROM LESSON_ATTACHMENT WHERE LESSON_ID = ?

feedback.select-all=select id, user_id, trainer_id, course_id, text, date_time from feedback
feedback.select-by-id=select id, user_id, trainer_id, course_id, text, date_time from feedback where id = ?
feedback.delete=delete from feedback where id = ?
feedback.insert=insert into feedback (user_id, trainer_id, course_id, text, date_time) values (?, ?, ?, ?, ?) returning id
feedback.update=update feedback set user_id = ?, trainer_id = ?, course_id = ?, text = ?, date_time = ? where id = ?
feedback.select-all-by-user-id=select id, user_id, trainer_id, course_id, text, date_time from feedback where user_id = ?
